{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "A TAP config Application",

  "Parameters" : {
    "KeyPairName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "Must be the name of an existing EC2 KeyPair."
    }
  },

  "Resources" : {

    "VPC" : {
       "Type" : "AWS::EC2::VPC",
       "Properties" : {
         "CidrBlock" : "10.0.0.0/16"
       }
     },

     "SubnetOne" : {
       "Type" : "AWS::EC2::Subnet",
       "Properties" : {
         "VpcId" : { "Ref" : "VPC" },
         "CidrBlock" : "10.0.0.0/24",
         "AvailabilityZone" : "eu-west-1a"
       }
     },

     "InternetGateway" : {
       "Type" : "AWS::EC2::InternetGateway"
     },

     "AttachGateway" : {
        "Type" : "AWS::EC2::VPCGatewayAttachment",
        "Properties" : {
          "VpcId" : { "Ref" : "VPC" },
          "InternetGatewayId" : { "Ref" : "InternetGateway" }
        }
     },

     "RouteTable" : {
       "Type" : "AWS::EC2::RouteTable",
       "Properties" : {
         "VpcId" : {"Ref" : "VPC"}
       }
     },

     "Route" : {
       "Type" : "AWS::EC2::Route",
       "DependsOn" : "AttachGateway",
       "Properties" : {
         "RouteTableId" : { "Ref" : "RouteTable" },
         "DestinationCidrBlock" : "0.0.0.0/0",
         "GatewayId" : { "Ref" : "InternetGateway" }
       }
     },

     "SubnetRouteTableAssociation1" : {
       "Type" : "AWS::EC2::SubnetRouteTableAssociation",
       "Properties" : {
         "SubnetId" : { "Ref" : "SubnetOne" },
         "RouteTableId" : { "Ref" : "RouteTable" }
       }
     },

     "IPAddress" : {
        "Type" : "AWS::EC2::EIP",
        "DependsOn" : "AttachGateway",
        "Properties" : {
          "Domain" : "VPC",
          "InstanceId" : { "Ref" : "DemoLaunchConfiguration" }
        }
      },

     "InstanceSecurityGroup" : {
       "Type" : "AWS::EC2::SecurityGroup",
       "Properties" : {
         "GroupDescription" : "Security groups",
         "VpcId" : { "Ref" : "VPC" },
         "SecurityGroupIngress" : [
           {
             "IpProtocol" : "tcp",
             "FromPort" : "22",
             "ToPort" : "22",
             "CidrIp" : "0.0.0.0/0"
           },
           {
             "IpProtocol" : "tcp",
             "FromPort" : "4567",
             "ToPort" : "4567",
             "CidrIp" : "0.0.0.0/0"
           }
         ]
       }
     },

     "LoadBalancerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security groups for load balancer",
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      }
    },

    "ElasticLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups" : [{ "Fn::GetAtt" : [ "LoadBalancerSecurityGroup", "GroupId" ] }],
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "4567",
            "Protocol": "TCP",
            "InstanceProtocol" : "TCP"
          }
        ]
      }
    },

    "DemoAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": "" },
        "LaunchConfigurationName": { "Ref": "DemoLaunchConfiguration" },
        "MinSize": "2",
        "MaxSize": "3",
        "LoadBalancerNames": [ { "Ref": "ElasticLoadBalancer" } ]
      }
    },

    "ScaleUpPolicy" : {
        "Type" : "AWS::AutoScaling::ScalingPolicy",
        "Properties" : {
          "AdjustmentType" : "ChangeInCapacity",
          "AutoScalingGroupName" : { "Ref" : "DemoAutoScalingGroup" },
          "Cooldown" : "300",
          "ScalingAdjustment" : "1"
        }
    },

    "ScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "DemoAutoScalingGroup" },
        "Cooldown" : "300",
        "ScalingAdjustment" : "-1"
      }
    },

    "CPUAlarmHigh": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-up if CPU > 90% for 4 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "120",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [ { "Ref": "ScaleUpPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "DemoAutoScalingGroup" }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold"
      }
    },

    "CPUAlarmLow": {
     "Type": "AWS::CloudWatch::Alarm",
     "Properties": {
        "AlarmDescription": "Scale-down if CPU < 90% for 4 minutes",
        "MetricName": "CPUUtilization",
        "Namespace": "AWS/EC2",
        "Statistic": "Average",
        "Period": "120",
        "EvaluationPeriods": "2",
        "Threshold": "90",
        "AlarmActions": [ { "Ref": "ScaleDownPolicy" } ],
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "DemoAutoScalingGroup" }
          }
        ],
        "ComparisonOperator": "LessThanThreshold"
      }
    },

    "DemoLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "KeyName" : { "Ref" : "KeyPairName" },
        "ImageId" : "ami-bff32ccc",
        "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
        "InstanceType" : "t2.micro",
        "UserData" : {
          "Fn::Base64" : { "Fn::Join" : ["",
            [
               "#!/bin/bash -ex", "\n",
               "echo 'hello' > ffff", "\n",
               "yum -y install nodejs npm --enablerepo=epel", "\n",
               "yum -y install git", "\n",
               "git clone github.com/Priyanka-Patidar/testrepo", "\n",
               "node testrepo/config.js &", "\n"
            ]
          ]}
        }
      }
    }

  },

}
